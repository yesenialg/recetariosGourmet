// <auto-generated />
using Gourmet.ContextDB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gourmet.Migrations
{
    [DbContext(typeof(DBRecetariosContext))]
    partial class DBRecetariosContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.2");

            modelBuilder.Entity("Gourmet.Receta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titulo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Recetas");
                });

            modelBuilder.Entity("Gourmet.Recetario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Titulo")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Recetarios", (string)null);
                });

            modelBuilder.Entity("RecetaRecetario", b =>
                {
                    b.Property<long>("RecetariosId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("RecetasId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RecetariosId", "RecetasId");

                    b.HasIndex("RecetasId");

                    b.ToTable("RecetasRecetario", (string)null);
                });

            modelBuilder.Entity("RecetaRecetario", b =>
                {
                    b.HasOne("Gourmet.Recetario", null)
                        .WithMany()
                        .HasForeignKey("RecetariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gourmet.Receta", null)
                        .WithMany()
                        .HasForeignKey("RecetasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
